//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: pointCloud.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import NIOConcurrencyHelpers
import SwiftProtobuf


/// Usage: instantiate `Creadto_PointCloudServiceClient`, then call methods of this protocol to make API calls.
internal protocol Creadto_PointCloudServiceClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Creadto_PointCloudServiceClientInterceptorFactoryProtocol? { get }

  func upload(
    callOptions: CallOptions?
  ) -> ClientStreamingCall<Creadto_PointCloudRequest, Creadto_PointCloudResponse>
}

extension Creadto_PointCloudServiceClientProtocol {
  internal var serviceName: String {
    return "creadto.PointCloudService"
  }

  /// Client streaming call to upload
  ///
  /// Callers should use the `send` method on the returned object to send messages
  /// to the server. The caller should send an `.end` after the final message has been sent.
  ///
  /// - Parameters:
  ///   - callOptions: Call options.
  /// - Returns: A `ClientStreamingCall` with futures for the metadata, status and response.
  internal func upload(
    callOptions: CallOptions? = nil
  ) -> ClientStreamingCall<Creadto_PointCloudRequest, Creadto_PointCloudResponse> {
    return self.makeClientStreamingCall(
      path: Creadto_PointCloudServiceClientMetadata.Methods.upload.path,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeuploadInterceptors() ?? []
    )
  }
}

#if compiler(>=5.6)
@available(*, deprecated)
extension Creadto_PointCloudServiceClient: @unchecked Sendable {}
#endif // compiler(>=5.6)

@available(*, deprecated, renamed: "Creadto_PointCloudServiceNIOClient")
internal final class Creadto_PointCloudServiceClient: Creadto_PointCloudServiceClientProtocol {
  private let lock = Lock()
  private var _defaultCallOptions: CallOptions
  private var _interceptors: Creadto_PointCloudServiceClientInterceptorFactoryProtocol?
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions {
    get { self.lock.withLock { return self._defaultCallOptions } }
    set { self.lock.withLockVoid { self._defaultCallOptions = newValue } }
  }
  internal var interceptors: Creadto_PointCloudServiceClientInterceptorFactoryProtocol? {
    get { self.lock.withLock { return self._interceptors } }
    set { self.lock.withLockVoid { self._interceptors = newValue } }
  }

  /// Creates a client for the creadto.PointCloudService service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Creadto_PointCloudServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self._defaultCallOptions = defaultCallOptions
    self._interceptors = interceptors
  }
}

internal struct Creadto_PointCloudServiceNIOClient: Creadto_PointCloudServiceClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Creadto_PointCloudServiceClientInterceptorFactoryProtocol?

  /// Creates a client for the creadto.PointCloudService service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Creadto_PointCloudServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

#if compiler(>=5.6)
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Creadto_PointCloudServiceAsyncClientProtocol: GRPCClient {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Creadto_PointCloudServiceClientInterceptorFactoryProtocol? { get }

  func makeUploadCall(
    callOptions: CallOptions?
  ) -> GRPCAsyncClientStreamingCall<Creadto_PointCloudRequest, Creadto_PointCloudResponse>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Creadto_PointCloudServiceAsyncClientProtocol {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Creadto_PointCloudServiceClientMetadata.serviceDescriptor
  }

  internal var interceptors: Creadto_PointCloudServiceClientInterceptorFactoryProtocol? {
    return nil
  }

  internal func makeUploadCall(
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncClientStreamingCall<Creadto_PointCloudRequest, Creadto_PointCloudResponse> {
    return self.makeAsyncClientStreamingCall(
      path: Creadto_PointCloudServiceClientMetadata.Methods.upload.path,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeuploadInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Creadto_PointCloudServiceAsyncClientProtocol {
  internal func upload<RequestStream>(
    _ requests: RequestStream,
    callOptions: CallOptions? = nil
  ) async throws -> Creadto_PointCloudResponse where RequestStream: Sequence, RequestStream.Element == Creadto_PointCloudRequest {
    return try await self.performAsyncClientStreamingCall(
      path: Creadto_PointCloudServiceClientMetadata.Methods.upload.path,
      requests: requests,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeuploadInterceptors() ?? []
    )
  }

  internal func upload<RequestStream>(
    _ requests: RequestStream,
    callOptions: CallOptions? = nil
  ) async throws -> Creadto_PointCloudResponse where RequestStream: AsyncSequence & Sendable, RequestStream.Element == Creadto_PointCloudRequest {
    return try await self.performAsyncClientStreamingCall(
      path: Creadto_PointCloudServiceClientMetadata.Methods.upload.path,
      requests: requests,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeuploadInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal struct Creadto_PointCloudServiceAsyncClient: Creadto_PointCloudServiceAsyncClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Creadto_PointCloudServiceClientInterceptorFactoryProtocol?

  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Creadto_PointCloudServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

#endif // compiler(>=5.6)

internal protocol Creadto_PointCloudServiceClientInterceptorFactoryProtocol: GRPCSendable {

  /// - Returns: Interceptors to use when invoking 'upload'.
  func makeuploadInterceptors() -> [ClientInterceptor<Creadto_PointCloudRequest, Creadto_PointCloudResponse>]
}

internal enum Creadto_PointCloudServiceClientMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "PointCloudService",
    fullName: "creadto.PointCloudService",
    methods: [
      Creadto_PointCloudServiceClientMetadata.Methods.upload,
    ]
  )

  internal enum Methods {
    internal static let upload = GRPCMethodDescriptor(
      name: "upload",
      path: "/creadto.PointCloudService/upload",
      type: GRPCCallType.clientStreaming
    )
  }
}

/// To build a server, implement a class that conforms to this protocol.
internal protocol Creadto_PointCloudServiceProvider: CallHandlerProvider {
  var interceptors: Creadto_PointCloudServiceServerInterceptorFactoryProtocol? { get }

  func upload(context: UnaryResponseCallContext<Creadto_PointCloudResponse>) -> EventLoopFuture<(StreamEvent<Creadto_PointCloudRequest>) -> Void>
}

extension Creadto_PointCloudServiceProvider {
  internal var serviceName: Substring {
    return Creadto_PointCloudServiceServerMetadata.serviceDescriptor.fullName[...]
  }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "upload":
      return ClientStreamingServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Creadto_PointCloudRequest>(),
        responseSerializer: ProtobufSerializer<Creadto_PointCloudResponse>(),
        interceptors: self.interceptors?.makeuploadInterceptors() ?? [],
        observerFactory: self.upload(context:)
      )

    default:
      return nil
    }
  }
}

#if compiler(>=5.6)

/// To implement a server, implement an object which conforms to this protocol.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Creadto_PointCloudServiceAsyncProvider: CallHandlerProvider {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Creadto_PointCloudServiceServerInterceptorFactoryProtocol? { get }

  @Sendable func upload(
    requestStream: GRPCAsyncRequestStream<Creadto_PointCloudRequest>,
    context: GRPCAsyncServerCallContext
  ) async throws -> Creadto_PointCloudResponse
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Creadto_PointCloudServiceAsyncProvider {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Creadto_PointCloudServiceServerMetadata.serviceDescriptor
  }

  internal var serviceName: Substring {
    return Creadto_PointCloudServiceServerMetadata.serviceDescriptor.fullName[...]
  }

  internal var interceptors: Creadto_PointCloudServiceServerInterceptorFactoryProtocol? {
    return nil
  }

  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "upload":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Creadto_PointCloudRequest>(),
        responseSerializer: ProtobufSerializer<Creadto_PointCloudResponse>(),
        interceptors: self.interceptors?.makeuploadInterceptors() ?? [],
        wrapping: self.upload(requestStream:context:)
      )

    default:
      return nil
    }
  }
}

#endif // compiler(>=5.6)

internal protocol Creadto_PointCloudServiceServerInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when handling 'upload'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeuploadInterceptors() -> [ServerInterceptor<Creadto_PointCloudRequest, Creadto_PointCloudResponse>]
}

internal enum Creadto_PointCloudServiceServerMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "PointCloudService",
    fullName: "creadto.PointCloudService",
    methods: [
      Creadto_PointCloudServiceServerMetadata.Methods.upload,
    ]
  )

  internal enum Methods {
    internal static let upload = GRPCMethodDescriptor(
      name: "upload",
      path: "/creadto.PointCloudService/upload",
      type: GRPCCallType.clientStreaming
    )
  }
}
